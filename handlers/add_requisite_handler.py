import re
from telegram import Update
from telegram.ext import ContextTypes
from utils.storage import set_user_requisites

def _digits_only(s: str) -> str:
    return "".join(ch for ch in (s or "") if ch.isdigit())

def _normalize_phone(phone: str) -> str:
    raw = "".join(ch for ch in (phone or "") if ch.isdigit() or ch == "+")
    if raw.startswith("00"):
        raw = "+" + raw[2:]
    if raw and raw[0] != "+" and len(raw) in (12, 13):
        raw = "+" + raw
    return raw

def _mask_card(card: str | None) -> str:
    d = _digits_only(card or "")
    if len(d) >= 4:
        return "**** **** **** " + d[-4:]
    return "****"

async def requisites_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stage = context.user_data.get("req_stage")
    if stage not in {"card", "phone", "fio", "bank"}:  # bank qo'shildi
        return

    text = (update.message.text or "").strip()

    if stage == "card":
        digits = _digits_only(text)
        if len(digits) != 16:
            await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        context.user_data["req_card"] = digits
        context.user_data["req_stage"] = "phone"
        await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +998901234567).")
        return
    
    if stage == "phone":
        norm = _normalize_phone(text)
        if not (norm.startswith("+") and len(re.sub(r"[^\d]", "", norm)) >= 10):
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: +998901234567.")
            return
        context.user_data["req_phone"] = norm
        context.user_data["req_stage"] = "fio"
        await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).")
        return
    
    if stage == "fio":
        if len(text) < 3:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        fio = re.sub(r"\s+", " ", text).strip()
        context.user_data["req_fio"] = fio
        context.user_data["req_stage"] = "bank"
        await update.message.reply_text("üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        return

    if stage == "bank":
        if len(text) < 2:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        bank = text.strip()
        
        user_id = update.effective_user.id
        card = context.user_data.get("req_card")
        phone = context.user_data.get("req_phone")
        fio = context.user_data.get("req_fio")
        
        # Bank bilan birga saqlash
        set_user_requisites(user_id, {
            "card": card,
            "phone": phone,
            "fio": fio,
            "bank": bank,
            "modes": []
        })

        # Barcha ma'lumotlarni tozalash
        for key in ("req_stage", "req_card", "req_phone", "req_fio", "req_bank"):
            context.user_data.pop(key, None)
        
        await update.message.reply_text("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # Rekvizitlarni ko'rsatish (dynamic import to avoid circular import)
        from handlers.requisites_handler import requisites_info
        return await requisites_info(update, context)